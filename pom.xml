<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0">
	<modelVersion>4.0.0</modelVersion>
	<groupId>eu.eurofel</groupId>
	<artifactId>euu</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>euu Tapestry 5 Application</name>
	<dependencies>
		<dependency>
			<groupId>org.apache.tapestry</groupId>
			<artifactId>tapestry-core</artifactId>
			<version>${tapestry-release-version}</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- A dependency on either JUnit or TestNG is required, or the surefire 
			plugin (which runs the tests) will fail, preventing Maven from packaging 
			the WAR. Tapestry includes a large number of testing facilities designed 
			for use with TestNG (http://testng.org/), so it's recommended. -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>5.8</version>
			<classifier>jdk15</classifier>
			<scope>test</scope>
		</dependency>

        <dependency>
            <groupId>org.aopalliance</groupId>
            <artifactId>com.springsource.org.aopalliance</artifactId>
            <version>1.0.0</version>
        </dependency>
        
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>com.springsource.javax.servlet</artifactId>
            <version>2.5.0</version>
            <scope>provided</scope>
        </dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.1</version>
		</dependency>
            
        <dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.1</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>4.1</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient-cache</artifactId>
			<version>4.1</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>2.4</version>
			<scope>test</scope>
		</dependency>
		<!-- <dependency> <groupId>net.sf.tacos</groupId> <artifactId>tacos-core</artifactId> 
			<version>5.0.0-SNAPSHOT</version> </dependency> -->
		<!-- tapestry-test will conflict with RunJettyRun inside Eclipse. tapestry-test 
			brings in Selenium, which is based on Jetty 5.1; RunJettyRun uses Jetty 6. 
			<dependency> <groupId>org.apache.tapestry</groupId> <artifactId>tapestry-test</artifactId> 
			<version>${tapestry-release-version}</version> <scope>test</scope> </dependency> 
			<dependency> <groupId>com.octo.captcha</groupId> <artifactId>jcaptcha</artifactId> 
			<version>1.0</version> </dependency> -->
		<!-- Provided by the servlet container, but sometimes referenced in the 
			application code. -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
		</dependency>

		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Expression Language (depends on core) Define this if you use Spring 
			Expression APIs (org.springframework.expression.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on core) Define this 
			if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on core, beans) 
			Define this if you use Spring AOP APIs (org.springframework.aop.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on core, expression, aop, beans) This 
			is the central artifact for Spring's Dependency Injection Container and is 
			generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, 
			Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.context.support</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on core, beans, aop, context) 
			Define this if you use Spring Transactions or DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.transaction</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- JDBC Data Access Library (depends on core, beans, context, transaction) 
			Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on core, beans, context, transaction) Define this if 
			you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, 
			JiBX, Castor, XStream, and XML Beans. (depends on core, beans, context) Define 
			this if you need OXM (org.springframework.oxm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.oxm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Web app development utilities common across Servlet/Portlet environments 
			(depends on core, beans, context) Define this if you use Spring MVC, or wish 
			to use Struts, JSF, or another web framework with Spring (org.springframework.web.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Servlet Environments (depends on core, beans, context, 
			web) Define this if you use Spring MVC with a Servlet Container such as Apache 
			Tomcat (org.springframework.web.servlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.web.servlet</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Spring MVC for Portlet Environments (depends on core, beans, context, 
			web) Define this if you use Spring MVC with a Portlet Container (org.springframework.web.portlet.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.web.portlet</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Support for testing Spring applications with tools such as JUnit and 
			TestNG This artifact is generally always defined with a 'test' scope for 
			the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tapestry</groupId>
			<artifactId>tapestry-spring</artifactId>
			<version>${tapestry-release-version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-ibatis</artifactId>
			<version>2.0.8</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.0.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.3.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-email</artifactId>
			<version>1.2</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tapestry</groupId>
			<artifactId>tapestry-upload</artifactId>
			<version>${tapestry-release-version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tapestry</groupId>
			<artifactId>plastic</artifactId>
			<version>5.3.6</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tapestry</groupId>
			<artifactId>tapestry-kaptcha</artifactId>
			<version>5.3.6</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.kaptcha</groupId>
			<artifactId>kaptcha</artifactId>
			<version>2.3</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>fr.exanpe</groupId>
			<artifactId>exanpe-t5-lib</artifactId>
			<version>1.2.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.abdera</groupId>
			<artifactId>abdera</artifactId>
			<version>1.1.3</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.apache.abdera</groupId>
			<artifactId>abdera-bundle</artifactId>
			<version>1.1.3</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
		</dependency>
	</dependencies>
	<ciManagement>
		<system>Hudson</system>
		<url>https://dre.object.ch/hudson/eurofel</url>
	</ciManagement>
	<scm>
		<url>https://dre.object.ch/hg/eurofel</url>
	</scm>
	<build>
		<finalName>euu</finalName>
		<plugins>
			<plugin>
				<version>2.3.2</version>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
					<optimize>true</optimize>
				</configuration>
			</plugin>

			<!-- Run the application using "mvn jetty:run" -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.9</version>
				<configuration>
					<!-- Log to the console. -->
					<requestLog implementation="org.mortbay.jetty.NCSARequestLog">
						<!-- This doesn't do anything for Jetty, but is a workaround for a Maven bug that prevents the requestLog from being set. -->
						<append>true</append>
					</requestLog>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<reporting>

		<!-- Adds a report detailing the components, mixins and base classes defined by this module. -->
		<plugins>
			<plugin>
				<groupId>org.apache.tapestry</groupId>
				<artifactId>tapestry-component-report</artifactId>
				<version>${tapestry-release-version}</version>
				<configuration>
					<rootPackage>eu.eurofel</rootPackage>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<repositories>

      <repository>
        <id>springsource-releases</id>
        <name>SpringSource Release Proxy</name>
        <url>https://oss.sonatype.org/content/repositories/springsource-releases</url>
      </repository>

		<repository>
			<id>com.springsource.repository.bundles.release</id>
			<name>EBR Spring Release Repository</name>
			<url>http://repository.springsource.com/maven/bundles/release</url>
		</repository>

		<repository>
			<id>com.springsource.repository.bundles.external</id>
			<name>EBR External Release Repository</name>
			<url>http://repository.springsource.com/maven/bundles/external</url>
		</repository>
	</repositories>

	<pluginRepositories>

		<!-- As above, this can be commented out when access to the snapshot version of a Tapestry Maven plugin is not required. -->
		<pluginRepository>
			<id>tapestry-snapshots</id>
			<url>http://repository.apache.org/snapshots/</url>
		</pluginRepository>


	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
		</dependencies>
	</dependencyManagement>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<tapestry-release-version>5.3.6</tapestry-release-version>
		<org.springframework.version>3.0.0.RELEASE</org.springframework.version>
	</properties>
</project>
